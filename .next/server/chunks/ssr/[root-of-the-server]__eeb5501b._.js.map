{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\nimport {vercel} from '@genkit-ai/vercel';\n\nexport const ai = genkit({\n  plugins: [vercel(), googleAI({\n    apiKey: process.env.NEXT_PUBLIC_GOOGLE_API_KEY,\n  })],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;;;;;;;AAGO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC;QAAU,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YAC3B,MAAM;QACR;KAAG;IACH,OAAO;AACT","debugId":null}},
    {"offset": {"line": 245, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/supabase.ts"],"sourcesContent":["\nimport { createClient, SupabaseClient } from \"@supabase/supabase-js\";\n\nconst supabaseUrl = \"https://rzzwuqpnimflfvtthexu.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ6end1cXBuaW1mbGZ2dHRoZXh1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUyNDk0MDMsImV4cCI6MjA3MDgyNTQwM30.w_eJfIbJKCx63scIhXUCPgt8L0HtN8B1y1H-_xvk5P0\";\n\nlet supabase: SupabaseClient;\n\nif (supabaseUrl && supabaseAnonKey) {\n  supabase = createClient(supabaseUrl, supabaseAnonKey);\n} else {\n  console.warn(\"Supabase URL or anonymous key is missing. Supabase client not initialized.\");\n  // Provide a dummy client to prevent the app from crashing\n  supabase = {\n    from: () => {\n      console.error(\"Supabase client is not initialized. Check your environment variables.\");\n      // Return a dummy object that won't cause immediate errors\n      return {\n        select: async () => ({ data: [], error: { message: \"Supabase not configured\", details: \"\", hint: \"\", code: \"\" } }),\n        insert: async () => ({ data: null, error: { message: \"Supabase not configured\", details: \"\", hint: \"\", code: \"\" } }),\n        update: async () => ({ data: null, error: { message: \"Supabase not configured\", details: \"\", hint: \"\", code: \"\" } }),\n        delete: async () => ({ data: null, error: { message: \"Supabase not configured\", details: \"\", hint: \"\", code: \"\" } }),\n      } as any;\n    },\n    auth: {\n        // Provide dummy auth methods\n        signUp: async () => ({ data: { user: null, session: null }, error: { name: \"AuthError\", message: \"Supabase not configured\" } }),\n        signInWithPassword: async () => ({ data: { user: null, session: null }, error: { name: \"AuthError\", message: \"Supabase not configured\" } }),\n        getSession: async () => ({ data: { session: null }, error: null }),\n        onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } } }),\n        signOut: async () => ({ error: null }),\n    } as any,\n  } as SupabaseClient;\n}\n\n\nexport { supabase };\n"],"names":[],"mappings":";;;AACA;;AAEA,MAAM,cAAc;AACpB,MAAM,kBAAkB;AAExB,IAAI;AAEJ,wCAAoC;IAClC,WAAW,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AACvC,OAAO;;AAuBP","debugId":null}},
    {"offset": {"line": 265, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/notification-flow.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview A flow for sending push notifications for new orders.\n *\n * - sendNewOrderNotification - A function that sends a notification to the admin.\n * - NewOrderNotificationInput - The input type for the notification function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { supabase } from '@/lib/supabase';\nimport { z } from 'genkit';\n\nconst ADMIN_EMAIL = 'admin@gmail.com';\n\nconst NewOrderNotificationInputSchema = z.object({\n  orderId: z.string().describe('The ID of the new order.'),\n  username: z.string().describe('The username of the customer who placed the order.'),\n  serviceType: z.string().describe('The type of service ordered.'),\n  platform: z.string().describe('The platform for which the service was ordered.'),\n});\nexport type NewOrderNotificationInput = z.infer<typeof NewOrderNotificationInputSchema>;\n\n// This is a simple wrapper function to call the flow.\nexport async function sendNewOrderNotification(input: NewOrderNotificationInput): Promise<void> {\n  await newOrderNotificationFlow(input);\n}\n\n// Define the Genkit flow\nconst newOrderNotificationFlow = ai.defineFlow(\n  {\n    name: 'newOrderNotificationFlow',\n    inputSchema: NewOrderNotificationInputSchema,\n    outputSchema: z.void(),\n  },\n  async (input) => {\n    // 1. Get the admin's FCM token from the database\n    const { data: adminUser, error: adminError } = await supabase\n      .from('users')\n      .select('fcm_token')\n      .eq('email', ADMIN_EMAIL)\n      .single();\n\n    if (adminError || !adminUser || !adminUser.fcm_token) {\n      console.error(\"Could not find admin user or admin's FCM token.\", adminError);\n      return; // Exit if no token is found\n    }\n\n    const fcmToken = adminUser.fcm_token;\n\n    // 2. Prepare the notification payload for Firebase Cloud Messaging (FCM)\n    const notificationPayload = {\n      message: {\n        token: fcmToken,\n        notification: {\n          title: 'ðŸ“¦ New Order Received!',\n          body: `${input.username} ordered ${input.serviceType} for ${input.platform}.`,\n        },\n        webpush: {\n          fcm_options: {\n            // This link will open when the user clicks the notification\n            link: `/admin/orders`, \n          },\n          notification: {\n             // You can add an icon URL here if you have one\n             icon: 'https://i.postimg.cc/hXXxpK3k/IMG-20250808-WA0265.jpg',\n             // Actions add buttons to the notification\n             actions: [\n                {\n                    action: 'view_order',\n                    title: 'View Order'\n                }\n             ]\n          }\n        },\n      },\n    };\n\n    // 3. Send the notification using the FCM API\n    // IMPORTANT: This requires setting up authentication with Google Cloud.\n    // We need to provide the `fcm_endpoint` and `project_id` from your Firebase project.\n    \n    const fcmEndpoint = `https://fcm.googleapis.com/v1/projects/${process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID}/messages:send`;\n\n    try {\n        // We are using `fetch` to call the FCM REST API.\n        // This requires getting an access token for authentication.\n        // The `googleAI` plugin in Genkit can help us get this token automatically.\n        const auth = await ai.getPlugin('googleai')?.getAuth();\n        if (!auth) {\n            throw new Error('Could not get Google authentication for FCM.');\n        }\n        const headers = await auth.getHeaders();\n        \n        const response = await fetch(fcmEndpoint, {\n            method: 'POST',\n            headers: {\n                ...headers,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(notificationPayload),\n        });\n\n        if (!response.ok) {\n            const errorBody = await response.text();\n            throw new Error(`FCM request failed with status ${response.status}: ${errorBody}`);\n        }\n\n        console.log('Successfully sent FCM notification.');\n\n    } catch (error) {\n        console.error('An error occurred while sending the FCM notification:', error);\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;AAGA;;;;;CAKC,GAED;AACA;AACA;AAAA;;;;;;;AAEA,MAAM,cAAc;AAEpB,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAIO,eAAe,yBAAyB,KAAgC;IAC7E,MAAM,yBAAyB;AACjC;AAEA,yBAAyB;AACzB,MAAM,2BAA2B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC5C;IACE,MAAM;IACN,aAAa;IACb,cAAc,uIAAA,CAAA,IAAC,CAAC,IAAI;AACtB,GACA,OAAO;IACL,iDAAiD;IACjD,MAAM,EAAE,MAAM,SAAS,EAAE,OAAO,UAAU,EAAE,GAAG,MAAM,sHAAA,CAAA,WAAQ,CAC1D,IAAI,CAAC,SACL,MAAM,CAAC,aACP,EAAE,CAAC,SAAS,aACZ,MAAM;IAET,IAAI,cAAc,CAAC,aAAa,CAAC,UAAU,SAAS,EAAE;QACpD,QAAQ,KAAK,CAAC,mDAAmD;QACjE,QAAQ,4BAA4B;IACtC;IAEA,MAAM,WAAW,UAAU,SAAS;IAEpC,yEAAyE;IACzE,MAAM,sBAAsB;QAC1B,SAAS;YACP,OAAO;YACP,cAAc;gBACZ,OAAO;gBACP,MAAM,GAAG,MAAM,QAAQ,CAAC,SAAS,EAAE,MAAM,WAAW,CAAC,KAAK,EAAE,MAAM,QAAQ,CAAC,CAAC,CAAC;YAC/E;YACA,SAAS;gBACP,aAAa;oBACX,4DAA4D;oBAC5D,MAAM,CAAC,aAAa,CAAC;gBACvB;gBACA,cAAc;oBACX,+CAA+C;oBAC/C,MAAM;oBACN,0CAA0C;oBAC1C,SAAS;wBACN;4BACI,QAAQ;4BACR,OAAO;wBACX;qBACF;gBACJ;YACF;QACF;IACF;IAEA,6CAA6C;IAC7C,wEAAwE;IACxE,qFAAqF;IAErF,MAAM,cAAc,CAAC,uCAAuC,EAAE,QAAQ,GAAG,CAAC,+BAA+B,CAAC,cAAc,CAAC;IAEzH,IAAI;QACA,iDAAiD;QACjD,4DAA4D;QAC5D,4EAA4E;QAC5E,MAAM,OAAO,MAAM,mHAAA,CAAA,KAAE,CAAC,SAAS,CAAC,aAAa;QAC7C,IAAI,CAAC,MAAM;YACP,MAAM,IAAI,MAAM;QACpB;QACA,MAAM,UAAU,MAAM,KAAK,UAAU;QAErC,MAAM,WAAW,MAAM,MAAM,aAAa;YACtC,QAAQ;YACR,SAAS;gBACL,GAAG,OAAO;gBACV,gBAAgB;YACpB;YACA,MAAM,KAAK,SAAS,CAAC;QACzB;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YACd,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,MAAM,IAAI,MAAM,CAAC,+BAA+B,EAAE,SAAS,MAAM,CAAC,EAAE,EAAE,WAAW;QACrF;QAEA,QAAQ,GAAG,CAAC;IAEhB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,yDAAyD;IAC3E;AACF;;;IAzFoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 376, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {sendNewOrderNotification as '40bd7c16089a55e72f14d7a1ca980151aa41f52c84'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 428, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 442, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 456, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}